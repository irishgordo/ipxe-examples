# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'
VAGRANTFILE_API_VERSION = "2"
# vagrant-libvirt should be specified
ENV['VAGRANT_DEFAULT_PROVIDER'] = "libvirt"

@root_dir = File.dirname(File.expand_path(__FILE__))
@settings = YAML.load_file(File.join(@root_dir, "settings.yml"))
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.graceful_halt_timeout = 120

  config.vm.define :pxe_server_kea do |pxe_server_kea|
    pxe_server_kea.vm.box = 'generic/debian10'
    pxe_server_kea.vm.hostname = 'pxe-server-kea'

    pxe_server_kea.vm.network 'private_network',
      :ip => @settings['kea_server']['main_network']['ip'],
      :libvirt__guest_ipv6 => "no",
      :libvirt__dhcp_enabled => false,
      :libvirt__network_name => 'harvester-airgap',
      :autostart => true,
      :libvirt__always_destroy => true

    # pxe_server_kea.vm.network 'private_network',
    #   :ip => '192.168.5.254',
    #   :libvirt__guest_ipv6 => "no",
    #   :libvirt__dhcp_enabled => false,
    #   :libvirt__network_name => 'non-airgap-net-temp',
    #   :autostart => true,
    #   :libvirt__always_destroy => true

    pxe_server_kea.vm.provider :libvirt do |libvirt|
      libvirt.cpu_mode = 'host-passthrough'
      libvirt.memory = '8192'
      libvirt.cpus = '4'
      libvirt.nic_model_type = 'e1000'
      libvirt.storage :file, :size => @settings['kea_server']['storage']['minio']['size'], :device => @settings['kea_server']['storage']['minio']['device']
      libvirt.storage :file, :size => @settings['kea_server']['storage']['caddy_fileserver']['size'], :device => @settings['kea_server']['storage']['caddy_fileserver']['device']
      libvirt.storage :file, :size => @settings['kea_server']['storage']['tftp']['size'], :device => @settings['kea_server']['storage']['tftp']['device']
    end

    pxe_server_kea.vm.provision :ansible do |ansible|
      ansible.playbook = 'ansible/setup_pxe_server_kea.yml'
      ansible.verbose ="vvv"
      ansible.extra_vars = {
        settings: @settings
      }
    end

  end

  config.vm.define :docker_registry do |docker_registry|
    docker_registry.vm.box = 'generic/debian10'
    docker_registry.vm.hostname = 'docker-registry'

    docker_registry.vm.network 'private_network',
        :ip => @settings['docker_registry']['ip'],
        :mac => @settings['docker_registry']['mac'],
        :libvirt__guest_ipv6 => "no",
        :libvirt__dhcp_enabled => true,
        :libvirt__network_name => 'harvester-airgap',
        :autostart => true,
        :libvirt__always_destroy => true

    docker_registry.vm.provider :libvirt do |libvirt|
        libvirt.cpu_mode = 'host-passthrough'
        libvirt.memory = @settings['docker_registry']['memory']
        libvirt.cpus = @settings['docker_registry']['cpus']
        libvirt.nic_model_type = 'e1000'
        libvirt.storage :file, :size => @settings['docker_registry']['storage']['host_docker']['size'], :device => @settings['docker_registry']['storage']['host_docker']['device']
        libvirt.storage :file, :size => @settings['docker_registry']['storage']['docker_registry']['size'], :device => @settings['docker_registry']['storage']['docker_registry']['device']
    end

    docker_registry.vm.provision :ansible do |ansible|
        ansible.playbook = 'ansible/setup_docker_registry.yml'
        ansible.verbose ="vvv"
        ansible.extra_vars = {
          settings: @settings
        }
    end

  end

  config.vm.define :rancher_node do |rancher_node|
    rancher_node.vm.box = 'generic/debian10'
    rancher_node.vm.hostname = 'rancher-server'

    rancher_node.vm.network 'private_network',
        :ip => @settings['rancher_node']['ip'],
        :mac => @settings['rancher_node']['mac'],
        :libvirt__guest_ipv6 => "no",
        :libvirt__dhcp_enabled => true,
        :libvirt__network_name => 'harvester-airgap',
        :autostart => true,
        :libvirt__always_destroy => true

    rancher_node.vm.provider :libvirt do |libvirt|
      libvirt.cpu_mode = 'host-passthrough'
      libvirt.memory = @settings['rancher_node']['memory']
      libvirt.cpus = @settings['rancher_node']['cpus']
      libvirt.nic_model_type = 'e1000'
    end

    rancher_node.vm.provision :ansible do |ansible|
      ansible.playbook = 'ansible/setup_rancher_node.yml'
      ansible.verbose ="vvv"
      ansible.extra_vars = {
        settings: @settings
      }
    end

  end

  # config.vm.define :docker_registry do |docker_registry|
  #   docker_registry.vm.box = 'generic/debian10'
  #   docker_registry.vm.hostname = 'docker-registry'
  # end

  cluster_node_index = @settings['harvester_cluster_nodes'] - 1
  (0..cluster_node_index).each do |node_number|
    vm_name = "harvester-node-#{node_number}"
    config.vm.define vm_name, autostart: false do |harvester_node|
      harvester_node.vm.hostname = "harvester-node-#{node_number}"
      harvester_node.vm.network 'private_network',
        libvirt__network_name: 'harvester-airgap',
        mac: @settings['harvester_network_config']['cluster'][node_number]['mac']

      harvester_node.vm.provider :libvirt do |libvirt|
        libvirt.cpu_mode = 'host-passthrough'
        libvirt.memory = @settings['harvester_network_config']['cluster'][node_number].key?('memory') ? @settings['harvester_network_config']['cluster'][node_number]['memory'] : @settings['harvester_node_config']['memory']
        libvirt.cpus = @settings['harvester_network_config']['cluster'][node_number].key?('cpu') ? @settings['harvester_network_config']['cluster'][node_number]['cpu'] : @settings['harvester_node_config']['cpu']
        libvirt.storage :file,
          size: @settings['harvester_network_config']['cluster'][node_number].key?('disk_size') ? @settings['harvester_network_config']['cluster'][node_number]['disk_size'] : @settings['harvester_node_config']['disk_size'],
          type: 'qcow2',
          bus: 'virtio',
          device: 'vda'
        boot_network = {'network' => 'harvester-airgap'}
        libvirt.boot 'hd'
        libvirt.boot boot_network
        # NOTE: default to UEFI boot. Comment this out for legacy BIOS.
        libvirt.loader = '/usr/share/qemu/OVMF.fd'
        libvirt.nic_model_type = 'e1000'
      end
    end
  end

  # config.vm.define :tinybox do |tinybox"|
  #   tinybox.vm.box = 'generic/debian10'
  #   tinybox.vm.hostname = 'tinybox'
  #   # set tiny box on the private network harvester-airgap with dhcp enabled
  #   tinybox.vm.network 'private_network',
  #     libvirt__network_name: 'harvester-airgap',
  #     mac: '02:00:00:71:29:7B'

  # end
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "base"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
