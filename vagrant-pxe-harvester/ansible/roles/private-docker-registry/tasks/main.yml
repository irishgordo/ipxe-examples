---

- name: update /etc/hosts
  ansible.builtin.shell: >
    echo "" >> /etc/hosts && echo "{{ settings.private_docker_registry_config.harvester_subnet_ip }} {{ settings.rancher_config.registry_domain }}" >> /etc/hosts \
    && echo "" >> /etc/hosts && echo "{{ settings.rancher_config.node_harvester_network_ip  }} {{ settings.rancher_config.rancher_install_domain }}" >> /etc/hosts
  register: host_update_result

- name: check connection to google first...so apt update doesn't fail
  uri:
    url: "https://www.google.com"
  retries: 5
  delay: 10
  register: outbound_connection_result
  until: outbound_connection_result is success

# NOTE: running 'update_cache' on the builtin apt module is not 'reliable', has mixed success over a series of runs
# had tried to originally implmenet that way, was presented with problems where sometimes it would work
# other times it simply wouldn't
- name: Run the equivalent of "apt-get update" as a separate step, first
  ansible.builtin.apt:
    update_cache: yes
    update_cache_retries: 10


- name: grab base packages for vagrant rancher single node
  retries: 30
  delay: 10
  ansible.builtin.apt:
    pkg:
      - gnupg2 
      - vim
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - wget
      - openssl
      - net-tools
      - htop
      - software-properties-common
      - parted
      - qemu-guest-agent
    state: present
  register: apt_init_result
  until: apt_init_result is success

- name: Output apt_init_result Debug Msg
  ansible.builtin.debug:
    msg: "{{ apt_init_result.stdout_lines }}"
    verbosity: 2
  ignore_errors: yes

- name: Docker and setup
  block:
    - name: run curl to snag docker linux ubuntu gpg
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      retries: 30
      delay: 10
      register: result_of_curl_snag_gpg_docker
      until: result_of_curl_snag_gpg_docker is success

    - name: add docker to apt sources lists
      ansible.builtin.shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      register: result_of_apt_sources_list_docker_add


    - name: Run the equivalent of "apt-get update" as a separate step, second
      ansible.builtin.apt:
        update_cache: yes
        update_cache_retries: 10

    - name: install docker
      retries: 30
      delay: 10
      ansible.builtin.apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
        state: present
      register: apt_install_docker_deps
      until: apt_install_docker_deps is success

    - name: add vagrant to docker
      ansible.builtin.user:
        name: vagrant
        groups: docker
        append: yes
      register: result_docker_group_add_user_mod

    - name: add helm apt signing key
      ansible.builtin.apt_key:
        url: https://baltocdn.com/helm/signing.asc
        state: present
      register: helm_key_result
      retries: 30
      delay: 10
      until: helm_key_result is success

    - name: Run the equivalent of "apt-get update" as a separate step, third
      ansible.builtin.apt:
        update_cache: yes
        update_cache_retries: 10

    - name: snag apt transport https
      retries: 30
      delay: 10
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
        state: present
      register: apt_transport_https_pkg_result
      until: apt_transport_https_pkg_result is success

    - name: modify helm ubuntu srcs
      ansible.builtin.shell: |
        echo "deb https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
      register: modify_helm_ubuntu_srcs_result

    - name: Run the equivalent of "apt-get update" as a separate step, fourth
      ansible.builtin.apt:
        update_cache: yes
        update_cache_retries: 10

    - name: install helm
      retries: 30
      delay: 10
      ansible.builtin.apt:
        pkg:
          - helm
        state: present
      register: acquire_helm_pkg_status
      until: acquire_helm_pkg_status is success

- name: Set up certs with openssl 
  block:
    - name: Output acquire_helm_pkg_status Debug Msg
      ansible.builtin.debug:
        msg: "{{ acquire_helm_pkg_status.stdout_lines }}"
        verbosity: 2
      ignore_errors: yes

    - name: create certs dir
      ansible.builtin.file:
        path: /home/vagrant/certs
        state: directory

    - name: create registry dir
      ansible.builtin.file:
        path: /home/vagrant/registry
        state: directory

    - name: build openssl registry certs task
      ansible.builtin.command: openssl req -newkey rsa:4096 -nodes -sha256 -keyout /home/vagrant/certs/domain.key -addext "subjectAltName = DNS:{{ settings.private_docker_registry_config.registry_domain }}" -subj '/CN=www.mydom.com/O=My Company Name LTD./C=US' -x509 -days 365 -out /home/vagrant/certs/domain.crt
      register: result_openssl_docker_reg_certs

    - name: create certs docker dir
      ansible.builtin.file:
        path: /etc/docker/certs.d/{{ settings.private_docker_registry_config.registry_domain }}:5000
        state: directory
      register: result_docker_certs_dir
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

    - name: move certs
      ansible.builtin.command: cp -v /home/vagrant/certs/domain.crt /etc/docker/certs.d/{{ settings.private_docker_registry_config.registry_domain }}:5000/domain.crt
      register: certs_moved_result
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool


- name: Move Over Docker Registry Content and Setup Rancher Images on Registry
  block:
    - name: copy docker-compose.yaml over
      ansible.builtin.copy:
        src: files/docker-compose.yaml
        dest: /home/vagrant/
      register: copy_docker_compose_result
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

    - name: start docker registry
      ansible.builtin.command: docker-compose -f /home/vagrant/docker-compose.yaml up -d
      register: docker_start_info
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

    - name: copy get-rancher-scripts over
      ansible.builtin.copy:
        src: files/get-rancher-scripts.sh
        dest: /home/vagrant/
      register: copy_rancher_script_status
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

    - name: make rancher scripts executable
      ansible.builtin.file:
        dest: /home/vagrant/get-rancher-scripts.sh
        mode: a+x
      register: rancher_scripts_executable_adj_result
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

    - name: run rancher script of getting images
      ansible.builtin.shell: |
        cd /home/vagrant && ./get-rancher-scripts.sh {{ settings.rancher_config.rancher_version }} && ls -alh /home/vagrant
      register: result_images
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

    - name: make executable script rancher save images
      ansible.builtin.file:
        dest: /home/vagrant/rancher-save-images.sh
        mode: a+x
      register: result_save_image_script_executable
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

    - name: make executable script rancher load images
      ansible.builtin.file:
        dest: /home/vagrant/rancher-load-images.sh
        mode: a+x
      register: result_load_images_script_executable
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

- name: Fetch Cert-Manager with Helm and Donwload Rancher AirGap Images
  block:
    - name: add cert manager helm repo for rancher
      ansible.builtin.shell: |
        helm repo add jetstack https://charts.jetstack.io/
      register: helm_repo_cert_manager_add_result

    - name: update helm repo
      ansible.builtin.shell: |
        helm repo update
      register: helm_repo_update_result

    - name: fetch cert manager via helm
      ansible.builtin.shell: |
        helm fetch jetstack/cert-manager --version {{ settings.rancher_config.cert_manager_version }}
      register: helm_fetch_cert_manager_result

    - name: append rancher-images.txt with helm info for cert-manager
      ansible.builtin.shell: |
        helm template ./cert-manager-{{ settings.rancher_config.cert_manager_version }}.tgz | awk '$1 ~ /image:/ {print $2}' | sed s/\"//g >> /home/vagrant/rancher-images.txt
      register: helm_images_added_to_rancher_images_for_cert_manager_result

    - name: helm repo add rancher-latest
      ansible.builtin.shell: |
        helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
      register: helm_repo_add_rancher_charts


    - name: update helm repo post rancher charts adding
      ansible.builtin.shell: |
        helm repo update
      register: helm_repo_update_result_post_rancher_charts

    - name: download rancher 2.6.4
      ansible.builtin.shell: |
        helm fetch rancher-latest/rancher --version=v2.6.4
      register: download_rancher_result
      when: (settings.rancher_config.run_single_node_air_gapped_rancher | bool) and (settings.rancher_config.rancher_version != "v2.6.4")
    
    - name: download rancher desired version
      ansible.builtin.shell: |
        helm fetch rancher-latest/rancher --version={{ settings.rancher_config.rancher_version }}
      register: download_rancher_result


    - name: sort rancher-images.txt
      ansible.builtin.command: sort -u /home/vagrant/rancher-images.txt -o /home/vagrant/rancher-images.txt
      register: sort_result_of_rancher_images_txt
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

    - name: acquire rancher images
      ansible.builtin.command: /home/vagrant/rancher-save-images.sh --image-list /home/vagrant/rancher-images.txt
      register: rancher_image_acquired_result
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool


- name: Grab Rancher 2.6.4 Images When Desired Version is Not 2.6.4 and Load
  block:
    - name: acquire rancher-images v2.6.4 txt
      retries: 30
      delay: 10
      ansible.builtin.get_url:
        force: yes
        timeout: 30
        url:  https://github.com/rancher/rancher/releases/download/v2.6.4/rancher-images.txt
        dest: /home/vagrant/rancher-images-v264.txt
      register: v264_rancher_images_txt
      until: v264_rancher_images_txt is success

    - name: acquire rancher-load-images v2.6.4 shell file
      retries: 30
      delay: 10
      ansible.builtin.get_url:
        force: yes
        timeout: 30
        url:  https://github.com/rancher/rancher/releases/download/v2.6.4/rancher-load-images.sh
        dest: /home/vagrant/rancher-load-images-v264.sh
      register: v264_rancher_load_images_sh
      until: v264_rancher_load_images_sh is success

    - name: acquire rancher-save-images v2.6.4 shell file
      retries: 30
      delay: 10
      ansible.builtin.get_url:
        force: yes
        timeout: 30
        url:  https://github.com/rancher/rancher/releases/download/v2.6.4/rancher-save-images.sh
        dest: /home/vagrant/rancher-save-images-v264.sh
      register: v264_rancher_save_images_sh
      until: v264_rancher_save_images_sh is success
    
    - name: make executable script rancher load images v2.6.4
      ansible.builtin.file:
        dest: /home/vagrant/rancher-load-images-v264.sh
        mode: a+x

    - name: make executable script rancher save images v2.6.4
      ansible.builtin.file:
        dest: /home/vagrant/rancher-save-images-v264.sh
        mode: a+x

    - name: acquire rancher images for v2.6.4
      ansible.builtin.command: /home/vagrant/rancher-save-images-v264.sh --image-list /home/vagrant/rancher-images-v264.txt

  when: (settings.rancher_config.run_single_node_air_gapped_rancher | bool) and (settings.rancher_config.rancher_version != "v2.6.4")


- name: Network Cutover AirGap the VM and Load Images into Registry
  block:
    # turn off the eth0, which is default network
    - name: disable eth0, default network, switch pure to harvester
      ansible.builtin.command: ifconfig eth0 down
      register: ifconfig_eth0_disabling_result
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool

    - name: test disabling didn't break pipe
      ansible.builtin.command: echo "testing..."
      register: result_of_eth0_disable_test
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool


    - name: load in rancher images to private registry
      ansible.builtin.command: /home/vagrant/rancher-load-images.sh --image-list /home/vagrant/rancher-images.txt --registry {{ settings.private_docker_registry_config.registry_domain }}:5000
      register: load_to_private_registry_result
      when: settings.rancher_config.run_single_node_air_gapped_rancher | bool